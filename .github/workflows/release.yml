name: Release

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'enable upterm debugging'     
        required: false
        default: 'false'
  push:
    branches: [ $default-branch ]

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: untagged # Optional fallback tag to use when no tag can be found
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.previoustag.outputs.tag }}
          release_name: ${{ steps.previoustag.outputs.tag }}
          draft: true

  build_release:
    name: Build release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        include:
          - os: ubuntu-18.04
            artifact_path: bin/PlaybookCreator
            artifact_name: PlaybookCreator
          - os: macos-latest
            artifact_path: bin/PlaybookCreator.dmg
            artifact_name: PlaybookCreator.dmg
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-18.04'
        run: sudo apt-get install build-essential pkg-config curl git cmake libbotan-2-dev qt5-default libboost-serialization-dev libboost-test-dev libboost-filesystem-dev libssl-dev

      - name: Install macOS dependencies
        if: matrix.os == 'macOS-latest'
        run: |
          brew list git &>/dev/null || brew install git
          brew list cmake &>/dev/null || brew install cmake
          brew list pkg-config &>/dev/null || brew install pkg-config
          brew list qt@5 &>/dev/null || brew install qt@5
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          
      - name: Setup upterm session
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true' }}
        uses: lhotari/action-upterm@v1
        
      - name: Cache_Boost
        if: matrix.os == 'macOS-latest'
        id: cache_boost
        uses: actions/cache@v2
        with:
          path: |
            ./boost/
          key: ${{ matrix.os }}-cache_boost_key_v01
          
      - name: Build Boost
        if: matrix.os == 'macOS-latest' && steps.cache_boost.outputs.cache-hit != 'true'
        run: |
          mkdir boost
          curl -O -L https://boostorg.jfrog.io/artifactory/main/release/1.66.0/source/boost_1_66_0.tar.gz
          tar -xzf boost_1_66_0.tar.gz
          cd boost_1_66_0
          ./bootstrap.sh --with-libraries=serialization,filesystem,test --prefix=../boost
          ./b2 install link=static runtime-link=static toolset=clang
          cd ..
          
      - name: Cache_Botan
        id: cache_botan
        uses: actions/cache@v2
        with:
          path: |
            ./botan/
          key: ${{ matrix.os }}-cache_botan_key_v01
          
      - name: Build Botan
        if: steps.cache_botan.outputs.cache-hit != 'true'
        run: |
          bash ci-scripts/build-botan.sh
          ls botan/

      - name: Build
        if: matrix.os == 'macOS-latest'
        run: |
          cmake . -DBoost_INCLUDE_DIR=$(pwd)/boost/include -DBoost_INCLUDE_DIR=$(pwd)/boost/include -DBoost_LIBRARY_DIR=$(pwd)/boost/lib -DBOTAN_LIBRARY=botan/libbotan-2.a -DBOTAN_INCLUDE_DIR=botan/build/include -DCMAKE_PREFIX_PATH=$(brew --prefix qt5)
          make
          
      - name: Build
        if: matrix.os == 'ubuntu-18.04'
        run: |
          cmake -D BOTAN_LIBRARY=botan/libbotan-2.a -D BOTAN_INCLUDE_DIR=botan/build/include .
          make

      - name: Test
        run: |
          ASAN_OPTIONS=detect_leaks=0 bin/tests -- --test-base-dir "test"
  
      - name: CreateArtifact
        if: matrix.os == 'macOS-latest'
        run: |
          $(brew --prefix qt5)/bin/macdeployqt bin/PlaybookCreator.app -verbose=3 -dmg -no-strip


      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact_path }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/x-apple-diskimage
